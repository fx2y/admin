```
# Provide your GitHub user or org name
GITHUB_NS=
```{{copy}}
```
# Provide your Docker Hub user or org name
IMG_NS=
```{{copy}}
```
# Install Tekton CRDs
kubectl apply -f https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.13.2/release.yaml
kubectl apply -f https://storage.googleapis.com/tekton-releases/triggers/latest/release.yaml

# Install Tasks to clone app repo, lint and test the Go app (skip Kaniko as it is not needed for this scenario)
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/git/git-clone.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/golang/lint.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/golang/tests.yaml
#kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/kaniko/kaniko.yaml

# Install new buildpacks Task to build image
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/buildpacks/buildpacks-v3.yaml
```{{execute}}
```
docker login -u ${IMG_NS}
```{{execute}}
```
kubectl create secret generic regcred  --from-file=.dockerconfigjson=/root/.docker/config.json --type=kubernetes.io/dockerconfigjson
```{{execute}}
```
kubectl create ns dev
kubectl create ns prod
```{{execute}}
```
git clone https://github.com/$GITHUB_NS/go-sample-app.git
git clone https://github.com/$GITHUB_NS/go-sample-app-ops.git
```{{execute}}
```
hub clone https://github.com/springone-tour-2020-cicd/go-sample-app.git && cd go-sample-app
hub fork --remote-name origin
```{{execute}}
```
BRANCH=scenario-5-finished
git checkout --track origin/$BRANCH
```{{execute}}
```
find . -name *.yaml -exec sed -i "s//springone-tour-2020-cicd//${GITHUB_NS}/g" {} +
find . -name *.yaml -exec sed -i "s/ springone-tour-2020-cicd/ ${IMG_NS}/g" {} +
```{{execute}}
```
git add -A
git commit -m "Reset from branch $BRANCH, updated namespaces"
```{{execute}}
```
git branch -m master scenario-1-start
git branch -m $BRANCH master
```{{execute}}
```
git push -f -u origin master
```{{execute}}
```
git push -f origin scenario-1-start
git branch -d scenario-1-start
```{{execute}}
```
cd ..
hub clone https://github.com/springone-tour-2020-cicd/go-sample-app-ops.git && cd go-sample-app-ops
hub fork --remote-name origin
git checkout --track origin/$BRANCH
find . -name *.yaml -exec sed -i "s//springone-tour-2020-cicd//${GITHUB_NS}/g" {} +
find . -name *.yaml -exec sed -i "s/ springone-tour-2020-cicd/ ${IMG_NS}/g" {} +
git add -A
git commit -m "Reset from branch $BRANCH, updated namespaces"
git branch -m master scenario-1-start
git branch -m $BRANCH master
git push -f -u origin master
git push -f origin scenario-1-start
git branch -d scenario-1-start
cd ..
```{{execute}}
```
cd go-sample-app
cat Dockerfile
```{{execute}}
```
pack set-default-builder gcr.io/paketo-buildpacks/builder:base-platform-api-0.3

pack build $IMG_NS/go-sample-app:pack-0.0.1 --publish
```{{execute}}
```
docker images | grep paketo
```{{execute}}
```
docker pull gcr.io/paketo-buildpacks/run:0.0.19-base-cnb
docker images | grep paketo
```{{execute}}
```
docker tag gcr.io/paketo-buildpacks/run:0.0.19-base-cnb gcr.io/paketo-buildpacks/run:base-cnb
docker images | grep paketo
```{{execute}}
```
pack rebase $IMG_NS/go-sample-app:pack-0.0.1 --publish --no-pull
```{{execute}}
```
cd /workspace/go-sample-app-ops/cicd/tekton
```{{execute}}
```
yq d -i build-pipeline.yaml "spec.tasks.(name==verify-digest)"
yq d -i build-pipeline.yaml "spec.tasks.(name==build-image)"
yq d -i build-pipeline.yaml "spec.params.(name==image)"
```{{execute}}
```
yq d -i build-trigger-template.yaml 'spec.resourcetemplates[0].spec.params.(name==image)'
```{{execute}}
```
yq m -i -a build-pipeline.yaml - <<EOF
spec:
tasks:
- name: build-image
taskRef:
name: buildpacks-v3
runAfter:
- fetch-repository
- lint
- test
workspaces:
- name: source
workspace: shared-workspace
params:
- name: BUILDER_IMAGE
value: gcr.io/paketo-buildpacks/builder:base-platform-api-0.3
- name: CACHE
value: buildpacks-cache
resources:
outputs:
- name: image
resource: build-image
EOF
```{{execute}}
```
yq m -i build-pipeline.yaml - <<EOF
spec:
resources:
- name: build-image
type: image
EOF
```{{execute}}
```
cat <<EOF >buildpacks-cache-pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
name: buildpacks-cache-pv
spec:
capacity:
storage: 3Gi
volumeMode: Filesystem
accessModes:
- ReadWriteOnce
persistentVolumeReclaimPolicy: Delete
storageClassName: local-storage
hostPath:
path: "/mnt/data"
EOF

cat <<EOF >>buildpacks-cache-pvc.yaml
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
name: buildpacks-cache-pvc
spec:
storageClassName: local-storage
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 500Mi
EOF
```{{execute}}
```
yq m -i build-trigger-template.yaml - <<EOF
spec:
resourcetemplates:
- spec:
resources:
- name: build-image
resourceRef:
name: buildpacks-app-image
podTemplate:
volumes:
- name: buildpacks-cache
persistentVolumeClaim:
claimName: buildpacks-cache-pvc
EOF

cat <<EOF >buildpacks-app-image.yaml
apiVersion: tekton.dev/v1alpha1
kind: PipelineResource
metadata:
name: buildpacks-app-image
spec:
type: image
params:
- name: url
value: ${IMG_NS}/go-sample-app:1.0.3
EOF
```{{execute}}
```
tkn task list
tkn pipeline list
```{{execute}}
```
kubectl apply -f sa.yaml               -f pv.yaml               -f pvc.yaml               -f buildpacks-cache-pv.yaml               -f buildpacks-cache-pvc.yaml               -f buildpacks-app-image.yaml
```{{execute}}
```
kubectl apply -f build-pipeline.yaml               -f build-trigger-template.yaml               -f build-trigger-binding.yaml               -f build-event-listener.yaml
```{{execute}}
```
kubectl rollout status deployment/el-build-event-listener
```{{execute}}
```
kubectl port-forward --address 0.0.0.0 svc/el-build-event-listener 8080:8080 2>&1 > /dev/null &
```{{execute}}
```
curl     -H 'X-GitHub-Event: pull_request'     -H 'Content-Type: application/json'     -d '{
"repository": {"clone_url": "'"https://github.com/${GITHUB_NS}/go-sample-app"'"},
"pull_request": {"head": {"sha": "master"}}
}' localhost:8080
```{{execute}}
```
tkn pipelinerun list
tkn pipelinerun logs -f
```{{execute}}
```
pkill kubectl && wait $!
```{{execute}}
```
kubectl apply -f https://github.com/pivotal/kpack/releases/download/v0.0.9/release-0.0.9.yaml
```{{execute}}
```
kubectl get all -n kpack
```{{execute}}
```
kubectl api-resources --api-group build.pivotal.io
```{{execute}}
```
kubectl get builders,builds,clusterbuilders,images,sourceresolvers --all-namespaces
```{{execute}}
```
mkdir ../kpack
cd ../kpack
```{{execute}}
```
cat <<EOF >builder.yaml
apiVersion: build.pivotal.io/v1alpha1
kind: Builder
metadata:
name: paketo-builder
spec:
image: gcr.io/paketo-buildpacks/builder:base-platform-api-0.3
EOF
```{{execute}}
```
cat <<EOF >image.yaml
apiVersion: build.pivotal.io/v1alpha1
kind: Image
metadata:
name: go-sample-app
spec:
builder:
name: paketo-builder
kind: Builder
serviceAccount: build-bot
#cacheSize: "1.5Gi"
source:
git:
url: https://github.com/$GITHUB_NS/go-sample-app
revision: master
tag: $IMG_NS/go-sample-app:kpack-0.0.1
EOF
```{{execute}}
```
kubectl apply -f builder.yaml               -f image.yaml
```{{execute}}
```
kubectl get builds
```{{execute}}
```
kubectl describe build go-sample-app-build-1-<uuid>
```{{copy}}
```
kubectl get pods | grep go-sample-app-build-
```{{execute}}
```
logs -image go-sample-app -build 1
```{{execute}}
```
cd /workspace/go-sample-app

sed -i 's/sunshine/friends/g' hello-server.go

git add -A
git commit -m "Hello, friends!"
git push origin master
```{{execute}}
```
cd /workspace/go-sample-app-ops/cicd/kpack

cat <<EOF >custom-builder.yaml
apiVersion: experimental.kpack.pivotal.io/v1alpha1
kind: Store
metadata:
name: paketo-store
spec:
sources:
- image: gcr.io/paketo-buildpacks/builder:base-platform-api-0.3
---
apiVersion: experimental.kpack.pivotal.io/v1alpha1
kind: Stack
metadata:
name: paketo-bionic-stack
spec:
id: "io.buildpacks.stacks.bionic"
buildImage:
image: "gcr.io/paketo-buildpacks/build:0.0.19-base-cnb"
runImage:
image: "gcr.io/paketo-buildpacks/run:0.0.19-base-cnb"
---
apiVersion: experimental.kpack.pivotal.io/v1alpha1
kind: CustomBuilder
metadata:
name: paketo-custom-builder
spec:
tag: $IMG_NS/paketo-custom-builder
serviceAccount: build-bot
stack: paketo-bionic-stack
store: paketo-store
order:
- group:
- id:  paketo-buildpacks/go
- group:
- id:  paketo-buildpacks/java
- group:
- id: paketo-buildpacks/nodejs
- group:
- id: paketo-buildpacks/dotnet-core
- group:
- id: paketo-buildpacks/nginx
- group:
- id: paketo-buildpacks/procfile
EOF
```{{execute}}
```
kubectl apply -f custom-builder.yaml
```{{execute}}
```
yq w -i image.yaml "spec.builder.kind" CustomBuilder
yq w -i image.yaml "spec.builder.name" paketo-custom-builder
```{{execute}}
```
kubectl apply -f image.yaml
```{{execute}}
```
kubectl get builds
```{{execute}}
```
kubectl describe build go-sample-app-build-<num>-<uuid>
```{{copy}}
```
logs -image go-sample-app -build <num>
```{{copy}}
```
sed -i 's/run:0.0.19-base-cnb/run:0.0.20-base-cnb/g' custom-builder.yaml

kubectl apply -f custom-builder.yaml
```{{execute}}
