@_ECHO_OFF

# Setup namespaces
#kubectl delete ns dev; kubectl delete ns prod
#kubectl create ns dev; kubectl create ns prod

rm -rf cd go-sample-app
git clone https://github.com/springone-tour-2020-cicd/go-sample-app.git && cd go-sample-app

# Check which process is on port 8080:
#lsof -i :8080 | grep LISTEN

clear
@_ECHO_ON

@_ECHO_# Sample app

ls
go run hello-server.go 2>&1 > /dev/null &
curl localhost:8080
pkill hello-server && wait $!

environment=sandbox; go run hello-server.go

@_ECHO_# Build with Dockerfile

docker build . -t go-sample-app
docker images | grep go-sample-app

docker tag go-sample-app $IMG_NS/go-sample-app:1.0.0
docker push $IMG_NS/go-sample-app:1.0.0

@_ECHO_# Initial deploy

cp -r $DEMO/intro/ops .
tree .
cd ops
yq r -C deployment.yaml
yqc service.yaml
kns dev
k apply -f .
k rollout status deploy/go-sample-app
k get all
k port-forward svc/go-sample-app 8080 &
curl localhost:8080
pkill kubectl

@_ECHO_# Rebuild

sed -i '' 's/world/sunshine/g' hello-server.go
docker build . -t $IMG_NS/go-sample-app:1.0.1 # TODO: why two tags?
docker push $IMG_NS/go-sample-app:1.0.1
sed -i '' 's|1.0.0|1.0.1|g' ops/deployment.yaml
k apply -f ops
k rollout status deploy/go-sample-app
k port-forward svc/go-sample-app 8080 &
curl localhost:8080
pkill kubectl

@_ECHO_# Promote to prod

cp deployment.yaml deployment-prod.yaml
cp service.yaml service-prod.yaml
yq w -i deployment-prod.yaml "metadata.namespace" "prod"
yq w -i service-prod.yaml "metadata.namespace" "prod"
kns prod
k apply -f deployment-prod.yaml
k apply -f service-prod.yaml
k rollout status deploy/go-sample-app
k port-forward svc/go-sample-app 8080 &
curl localhost:8080
pkill kubectl
