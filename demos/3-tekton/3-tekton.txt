@_ECHO_ON

# Provide your GitHub and Docker Hub namepspaces
GITHUB_NS=
IMG_NS=
kubectl create ns dev
kubectl create ns prod
git clone https://github.com/$GITHUB_NS/go-sample-app.git
hub clone https://github.com/springone-tour-2020-cicd/go-sample-app.git && cd go-sample-app
hub fork --remote-name origin
git ls-remote --heads | grep scenario
# Fill this in with the branch name (e.g. BRANCH=scenario-1-finished)
BRANCH=
git checkout --track origin/$BRANCH
find . -name *.yaml -exec sed -i "s//springone-tour-2020-cicd//${GITHUB_NS}/g" {} +
find . -name *.yaml -exec sed -i "s/ springone-tour-2020-cicd/ ${IMG_NS}/g" {} +
git add -A
git commit -m "Reset from branch $BRANCH, updated namespaces"
git branch -m master old-master
git branch -m $BRANCH master
git push -f -u origin master
git push -f origin old-master
git branch -d old-master
kubectl apply -f https://storage.googleapis.com/tekton-releases/pipeline/previous/v0.13.2/release.yaml
kubectl api-resources --api-group='tekton.dev'
tkn task list
cat <<EOF | kubectl apply -f -
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
name: echo-hello-world
spec:
steps:
- name: echo
image: ubuntu
command:
- echo
args:
- "hello world"
EOF
tkn task list
tkn tasks describe echo-hello-world
cat <<EOF | kubectl apply -f -
apiVersion: tekton.dev/v1alpha1
kind: TaskRun
metadata:
name: echo-hello-world-task-run
spec:
taskRef:
name: echo-hello-world
EOF
tkn taskrun describe echo-hello-world-task-run
ðŸ¦¶ Steps

NAME     STATUS
âˆ™ echo   PodInitializing

Keep executing the `tkn taskrun describe` command and you will eventually see that the pod status is `COMPLETED`.


Now look at the output of `TaskRun`

tkn taskrun logs echo-hello-world-task-run
[echo] hello world

Hello Tekton!


git clone https://github.com/$GITHUB_NS/go-sample-app.git && cd go-sample-app
mkdir -p cicd/tekton
cd cicd/tekton
cat <<EOF >pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
name: workspace-pv
spec:
capacity:
storage: 3Gi
volumeMode: Filesystem
accessModes:
- ReadWriteOnce
persistentVolumeReclaimPolicy: Delete
storageClassName: local-storage
hostPath:
path: "/mnt/data"
EOF
cat <<EOF >pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
name: workspace-pvc
spec:
storageClassName: local-storage
accessModes:
- ReadWriteOnce
resources:
requests:
storage: 500Mi
EOF
kubectl apply -f .
kubectl get pvc
docker login -u $IMG_NS
cat /root/.docker/config.json
kubectl create secret generic regcred  --from-file=.dockerconfigjson=/root/.docker/config.json --type=kubernetes.io/dockerconfigjson
cat <<EOF >sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
name: build-bot
secrets:
- name: regcred
EOF
kubectl apply -f sa.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/git/git-clone.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/golang/lint.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/golang/tests.yaml
kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/kaniko/kaniko.yaml
tkn task list
$ tkn task list
NAME               AGE
echo-hello-world   10 minutes ago
git-clone          6 seconds ago
golang-test        6 seconds ago
golangci-lint      6 seconds ago
kaniko             6 seconds ago

Let's take a closer look at the `golang-build` task.

curl https://raw.githubusercontent.com/tektoncd/catalog/v1beta1/golang/build.yaml
steps:
- name: build
image: golang:$(params.version)
workingDir: $(workspaces.source.path)
script: |
go build $(params.flags) $(params.packages)
env:
- name: GOPATH
value: /workspace
- name: GOOS
value: "$(params.GOOS)"
- name: GOARCH
value: "$(params.GOARCH)"
- name: GO111MODULE
value: "$(params.GO111MODULE)"

The value of the properties and environment variables will be set when we create the TaskRun resource that references this Task.

With these predefined Tasks installed in the cluster, we can now compose these Tasks in a Pipeline.

cat <<EOF >build-pipeline.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
name: build-pipeline
spec:
params:
workspaces:
tasks:
EOF
cat <<EOF >>build-pipeline.yaml
- name: fetch-repository
taskRef:
name: git-clone
workspaces:
- name: output
workspace: shared-workspace
params:
- name: url
value: $(params.repo-url)
- name: revision
value: $(params.revision)
- name: deleteExisting
value: "true"
EOF
yq m -i build-pipeline.yaml - <<EOF
spec:
params:
- name: repo-url
type: string
description: The Git repository URL to clone from.
- name: revision
type: string
description: The Git revision to clone.
workspaces:
- name: shared-workspace
description: This workspace will receive the cloned git repo and be passed to the next Task.
EOF
yq m -i -a build-pipeline.yaml - <<EOF
spec:
tasks:
- name: lint
taskRef:
name: golangci-lint
runAfter:
- fetch-repository
workspaces:
- name: source
workspace: shared-workspace
params:
- name: package
value: go-sample-app
EOF
yq m -i -a build-pipeline.yaml - <<EOF
spec:
tasks:
- name: test
taskRef:
name: golang-test
runAfter:
- fetch-repository
workspaces:
- name: source
workspace: shared-workspace
params:
- name: package
value: go-sample-app
EOF
yq m -i -a build-pipeline.yaml - <<EOF
spec:
tasks:
- name: build-image
taskRef:
name: kaniko
runAfter:
- fetch-repository
- lint
- test
workspaces:
- name: source
workspace: shared-workspace
params:
- name: IMAGE
value: $(params.image)
EOF
yq m -i -a build-pipeline.yaml - <<EOF
spec:
params:
- name: image
description: reference of the image to build
EOF
yq m -i -a build-pipeline.yaml - <<EOF
spec:
tasks:
- name: verify-digest
runAfter:
- build-image
params:
- name: digest
value: $(tasks.build-image.results.IMAGE-DIGEST)
taskSpec:
params:
- name: digest
steps:
- name: bash
image: ubuntu
script: |
echo $(params.digest)
case .$(params.digest) in
".sha"*) exit 0 ;;
*)       echo "Digest value is not correct" && exit 1 ;;
esac
EOF
yq r -C build-pipeline.yaml
kubectl apply -f build-pipeline.yaml
cat <<EOF >build-pipeline-run.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
name: build-pipeline-run
spec:
pipelineRef:
name: build-pipeline
workspaces:
- name: shared-workspace
persistentvolumeclaim:
claimName: workspace-pvc
EOF
BUILD_DATE=`date +%Y.%m.%d-%H.%M.%S`
yq m -i build-pipeline-run.yaml - <<EOF
spec:
params:
- name: image
value: ${IMG_NS}/go-sample-app:${BUILD_DATE}
EOF
yq m -i build-pipeline-run.yaml - <<EOF
spec:
serviceAccountName: build-bot
EOF
yq m -i -a build-pipeline-run.yaml - <<EOF
spec:
params:
- name: repo-url
value: https://github.com/${GITHUB_NS}/go-sample-app.git
EOF
yq m -i -a build-pipeline-run.yaml - <<EOF
spec:
params:
- name: revision
value: master
EOF
yq r -C build-pipeline-run.yaml
kubectl apply -f build-pipeline-run.yaml
tkn pipelineruns list
tkn pipelineruns describe build-pipeline-run
git add -A
git commit -m 'Changes from the Tekton scenario'
git push origin master
